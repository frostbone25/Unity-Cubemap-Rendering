#define THREAD_GROUP_SIZE_X 4
#define THREAD_GROUP_SIZE_Y 4
#define THREAD_GROUP_SIZE_Z 1

#define PI 3.14159265359f

//|||||||||||||||||||||||||||||||||||||| INCLUDES ||||||||||||||||||||||||||||||||||||||
//|||||||||||||||||||||||||||||||||||||| INCLUDES ||||||||||||||||||||||||||||||||||||||
//|||||||||||||||||||||||||||||||||||||| INCLUDES ||||||||||||||||||||||||||||||||||||||

#include "CubemapSampling.cginc"
#include "SpecularConvolutionGGX.cginc"
#include "SpecularConvolutionGaussian.cginc"

//|||||||||||||||||||||||||||||||||||||| PARAMETERS ||||||||||||||||||||||||||||||||||||||
//|||||||||||||||||||||||||||||||||||||| PARAMETERS ||||||||||||||||||||||||||||||||||||||
//|||||||||||||||||||||||||||||||||||||| PARAMETERS ||||||||||||||||||||||||||||||||||||||

int SpecularConvolutionSamples;
float SpecularRoughness;

int GaussianSampleRadius;
float GaussianSampleOffset;

int CubemapFaceIndex;
int CubemapFaceResolution;
int CubemapMipFaceResolution;

Texture2D<float4> SkyboxVisibilityFace;

RWTexture2D<float4> CubemapFace;

//NOTE: There is no such thing as a RWTextureCube unfortunately...
//So to make do, we use a texture2D array.
RWTexture2DArray<float4> CubemapOutput;
RWTexture2DArray<float4> CubemapInput;

#pragma kernel CubemapCombine
[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
void CubemapCombine(uint3 id : SV_DispatchThreadID)
{
    //CubemapOutput[uint3(id.xy, CubemapFaceIndex)] = CubemapFace[uint2(id.x, (CubemapFaceResolution - 1) - id.y)] * SkyboxVisibilityFace[id.xy];
    //CubemapOutput[uint3(id.xy, CubemapFaceIndex)] = CubemapFace[uint2((CubemapFaceResolution - 1) - id.x, id.y)] * SkyboxVisibilityFace[id.xy];
    CubemapOutput[uint3(id.xy, CubemapFaceIndex)] = CubemapFace[uint2(id.xy)] * SkyboxVisibilityFace[id.xy].r;
}

#pragma kernel ConvolveSpecularGGX
[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, 6)]
void ConvolveSpecularGGX(uint3 id : SV_DispatchThreadID)
{
    //NOTE TO SELF: The 0.5f offsets here are CRITICAL when computing normalized UVs in a compute shader
    float2 normalizedUV = float2(id.x + 0.5f, id.y + 0.5f) / CubemapMipFaceResolution;
    float2 signedUV = normalizedUV * 2.0f - 1.0f;
    
    float3 rayDirection = CubemapTexelToDirection(signedUV, id.z);
        
    float4 result = float4(0, 0, 0, 0);
    
    for (int i = 0; i < SpecularConvolutionSamples; i++)
    {
        float2 sampleSet = Hammersley(i, SpecularConvolutionSamples);

        float3 specularRayDirection = ImportanceSampleGGX_VNDF(sampleSet, rayDirection, rayDirection, SpecularRoughness);
        
        uint3 textureSampleCoords = RayDirectionToCubemapTexel(specularRayDirection, CubemapMipFaceResolution * 2);
        
        result += CubemapInput[textureSampleCoords];
    }
    
    result /= SpecularConvolutionSamples;
    
    result = max(0.0f, result);
    
    CubemapOutput[id.xyz] = result;
}


//|||||||||||||||||||||||||||||||||||||| SPECULAR CONVOLUTION GAUSSIAN ||||||||||||||||||||||||||||||||||||||
//|||||||||||||||||||||||||||||||||||||| SPECULAR CONVOLUTION GAUSSIAN ||||||||||||||||||||||||||||||||||||||
//|||||||||||||||||||||||||||||||||||||| SPECULAR CONVOLUTION GAUSSIAN ||||||||||||||||||||||||||||||||||||||

/*
#pragma kernel ConvolveSpecularGaussian
[numthreads(4, 4, 6)]
void ConvolveSpecularGaussian(uint3 id : SV_DispatchThreadID)
{
    float4 result = float4(0, 0, 0, 0);
    float weightSum = 0.0;

    int sampleCount = GaussianSampleRadius * 0.5f;
    
    for (int x = -sampleCount; x <= sampleCount; x++)
    {
        for (int y = -sampleCount; y <= sampleCount; y++)
        {
            uint2 samplePos = id.xy * 2 + uint2(x, y);
            
            //simple black outline fix
            //(acts like clamp wrap mode on edges)
            if (samplePos.x < 0)
                samplePos.x = 0;
            
            if (samplePos.y < 0)
                samplePos.y = 0;
            
            if (samplePos.x > (CubemapMipFaceResolution * 2) - 1)
                samplePos.x = (CubemapMipFaceResolution * 2) - 1;
            
            if (samplePos.y > (CubemapMipFaceResolution * 2) - 1)
                samplePos.y = (CubemapMipFaceResolution * 2) - 1;

            float weight = GaussianWeight(x, y, sampleCount);
            result += CubemapInput[uint3(samplePos, id.z)] * weight;
            weightSum += weight;
        }
    }
    
    result /= weightSum;
    CubemapOutput[id.xyz] = result;
}
*/

//|||||||||||||||||||||||||||||||||||||| SPECULAR CONVOLUTION GAUSSIAN (EDGE FIX) ||||||||||||||||||||||||||||||||||||||
//|||||||||||||||||||||||||||||||||||||| SPECULAR CONVOLUTION GAUSSIAN (EDGE FIX) ||||||||||||||||||||||||||||||||||||||
//|||||||||||||||||||||||||||||||||||||| SPECULAR CONVOLUTION GAUSSIAN (EDGE FIX) ||||||||||||||||||||||||||||||||||||||

#pragma kernel ConvolveSpecularGaussian
[numthreads(4, 4, 6)]
void ConvolveSpecularGaussian(uint3 id : SV_DispatchThreadID)
{
    //the cubemap input we are pulling from is from the mip level higher than the current one, so x2 is needed.
    float resolution = CubemapMipFaceResolution * 2.0f;
    float invResolution = 1.0 / resolution;
    float2 baseNVC = ((id.xy * 2.0 + 0.5) * invResolution) * 2.0f - 1.0f;
    
    //compute primary cubemap ray direction
    float3 baseDir = CubemapTexelToDirection(baseNVC, id.z);

    //cubemap tangent and bitangent vectors for the current face
    float3 tangent;
    float3 bitangent;
    GetCubemapFaceBasis(id.z, tangent, bitangent);

    float4 result = float4(0, 0, 0, 0);
    float weightSum = 0.0;

    int sampleCount = GaussianSampleRadius * 0.5f;
    
    for (int x = -sampleCount; x <= sampleCount; x++)
    {
        for (int y = -sampleCount; y <= sampleCount; y++)
        {
            float2 offsetUV = float2(x, y) * invResolution * GaussianSampleOffset;
            float3 sampleDir = normalize(baseDir + offsetUV.x * tangent + offsetUV.y * bitangent);

            uint sampleFace;
            float2 sampleUV;
            DirectionToCubemapUV(sampleDir, sampleFace, sampleUV);

            uint2 texelPos = uint2(sampleUV * resolution);
            float weight = GaussianWeight(x, y, sampleCount);
            result += CubemapInput[uint3(texelPos, sampleFace)] * weight;
            weightSum += weight;
        }
    }

    result /= max(weightSum, 0.0001);
    
    CubemapOutput[id.xyz] = result;
}